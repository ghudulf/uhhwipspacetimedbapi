// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#nullable enable

using System;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    public sealed partial class RemoteReducers : RemoteBase
    {
        internal RemoteReducers(DbConnection conn, SetReducerFlags flags) : base(conn) => SetCallReducerFlags = flags;
        internal readonly SetReducerFlags SetCallReducerFlags;
    }

    public sealed partial class RemoteTables : RemoteTablesBase
    {
        public RemoteTables(DbConnection conn)
        {
            AddTable(Bus = new(conn));
            AddTable(BusIdCounter = new(conn));
            AddTable(BusLocation = new(conn));
            AddTable(BusStop = new(conn));
            AddTable(CashierDay = new(conn));
            AddTable(Client = new(conn));
            AddTable(ConductorStatistics = new(conn));
            AddTable(DiscountIdCounter = new(conn));
            AddTable(Discounts = new(conn));
            AddTable(Employee = new(conn));
            AddTable(EmployeeIdCounter = new(conn));
            AddTable(EmployeeShift = new(conn));
            AddTable(FuelRecord = new(conn));
            AddTable(Incident = new(conn));
            AddTable(Job = new(conn));
            AddTable(JobIdCounter = new(conn));
            AddTable(LogIdCounter = new(conn));
            AddTable(MagicLinkToken = new(conn));
            AddTable(Maintenance = new(conn));
            AddTable(MaintenanceIdCounter = new(conn));
            AddTable(OidcAuthorizationIdCounter = new(conn));
            AddTable(OidcScopeIdCounter = new(conn));
            AddTable(OidcTokenIdCounter = new(conn));
            AddTable(OpenIdConnect = new(conn));
            AddTable(OpenIdConnectGrant = new(conn));
            AddTable(OpenIddictSpacetimeAuthorization = new(conn));
            AddTable(OpenIddictSpacetimeScope = new(conn));
            AddTable(OpenIddictSpacetimeToken = new(conn));
            AddTable(Passenger = new(conn));
            AddTable(PassengerCount = new(conn));
            AddTable(PassengerIdCounter = new(conn));
            AddTable(Permission = new(conn));
            AddTable(PermissionIdCounter = new(conn));
            AddTable(Person = new(conn));
            AddTable(QrSession = new(conn));
            AddTable(Role = new(conn));
            AddTable(RoleIdCounter = new(conn));
            AddTable(RolePermission = new(conn));
            AddTable(RolePermissionIdCounter = new(conn));
            AddTable(Route = new(conn));
            AddTable(RouteConductor = new(conn));
            AddTable(RouteIdCounter = new(conn));
            AddTable(RouteSchedule = new(conn));
            AddTable(Sale = new(conn));
            AddTable(SaleIdCounter = new(conn));
            AddTable(ScheduleIdCounter = new(conn));
            AddTable(SeatConfiguration = new(conn));
            AddTable(SeatConfigurationIdCounter = new(conn));
            AddTable(Ticket = new(conn));
            AddTable(TicketIdCounter = new(conn));
            AddTable(TotpSecret = new(conn));
            AddTable(TotpSecretIdCounter = new(conn));
            AddTable(TwoFactorToken = new(conn));
            AddTable(TwoFactorTokenIdCounter = new(conn));
            AddTable(UserIdCounter = new(conn));
            AddTable(UserProfile = new(conn));
            AddTable(UserRole = new(conn));
            AddTable(UserRoleIdCounter = new(conn));
            AddTable(UserSettings = new(conn));
            AddTable(WebAuthnChallenge = new(conn));
            AddTable(WebAuthnChallengeIdCounter = new(conn));
            AddTable(WebAuthnCredential = new(conn));
            AddTable(WebAuthnCredentialIdCounter = new(conn));
            AddTable(AdminActionLog = new(conn));
        }
    }

    public sealed partial class SetReducerFlags { }

        public interface IRemoteDbContext : IDbContext<RemoteTables, RemoteReducers, SetReducerFlags, SubscriptionBuilder> { }

        public sealed class EventContext : IEventContext, IRemoteDbContext
        {
            private readonly DbConnection conn;

            /// <summary>
            /// The event that caused this callback to run.
            /// </summary>
            public readonly Event<Reducer> Event;

            /// <summary>
            /// Access to tables in the client cache, which stores a read-only replica of the remote database state.
            ///
            /// The returned <c>DbView</c> will have a method to access each table defined by the module.
            /// </summary>
            public RemoteTables Db => conn.Db;
            /// <summary>
            /// Access to reducers defined by the module.
            ///
            /// The returned <c>RemoteReducers</c> will have a method to invoke each reducer defined by the module,
            /// plus methods for adding and removing callbacks on each of those reducers.
            /// </summary>
            public RemoteReducers Reducers => conn.Reducers;
            /// <summary>
            /// Access to setters for per-reducer flags.
            ///
            /// The returned <c>SetReducerFlags</c> will have a method to invoke,
            /// for each reducer defined by the module,
            /// which call-flags for the reducer can be set.
            /// </summary>
            public SetReducerFlags SetReducerFlags => conn.SetReducerFlags;
            /// <summary>
            /// Returns <c>true</c> if the connection is active, i.e. has not yet disconnected.
            /// </summary>
            public bool IsActive => conn.IsActive;
            /// <summary>
            /// Close the connection.
            ///
            /// Throws an error if the connection is already closed.
            /// </summary>
            public void Disconnect() {
                conn.Disconnect();
            }
            /// <summary>
            /// Start building a subscription.
            /// </summary>
            /// <returns>A builder-pattern constructor for subscribing to queries,
            /// causing matching rows to be replicated into the client cache.</returns>
            public SubscriptionBuilder SubscriptionBuilder() => conn.SubscriptionBuilder();
            /// <summary>
            /// Get the <c>Identity</c> of this connection.
            ///
            /// This method returns null if the connection was constructed anonymously
            /// and we have not yet received our newly-generated <c>Identity</c> from the host.
            /// </summary>
            public Identity? Identity => conn.Identity;
            /// <summary>
            /// Get this connection's <c>ConnectionId</c>.
            /// </summary>
            public ConnectionId ConnectionId => conn.ConnectionId;

            internal EventContext(DbConnection conn, Event<Reducer> Event)
            {
                this.conn = conn;
                this.Event = Event;
            }
        }

        public sealed class ReducerEventContext : IReducerEventContext, IRemoteDbContext
        {
            private readonly DbConnection conn;
            /// <summary>
            /// The reducer event that caused this callback to run.
            /// </summary>
            public readonly ReducerEvent<Reducer> Event;

            /// <summary>
            /// Access to tables in the client cache, which stores a read-only replica of the remote database state.
            ///
            /// The returned <c>DbView</c> will have a method to access each table defined by the module.
            /// </summary>
            public RemoteTables Db => conn.Db;
            /// <summary>
            /// Access to reducers defined by the module.
            ///
            /// The returned <c>RemoteReducers</c> will have a method to invoke each reducer defined by the module,
            /// plus methods for adding and removing callbacks on each of those reducers.
            /// </summary>
            public RemoteReducers Reducers => conn.Reducers;
            /// <summary>
            /// Access to setters for per-reducer flags.
            ///
            /// The returned <c>SetReducerFlags</c> will have a method to invoke,
            /// for each reducer defined by the module,
            /// which call-flags for the reducer can be set.
            /// </summary>
            public SetReducerFlags SetReducerFlags => conn.SetReducerFlags;
            /// <summary>
            /// Returns <c>true</c> if the connection is active, i.e. has not yet disconnected.
            /// </summary>
            public bool IsActive => conn.IsActive;
            /// <summary>
            /// Close the connection.
            ///
            /// Throws an error if the connection is already closed.
            /// </summary>
            public void Disconnect() {
                conn.Disconnect();
            }
            /// <summary>
            /// Start building a subscription.
            /// </summary>
            /// <returns>A builder-pattern constructor for subscribing to queries,
            /// causing matching rows to be replicated into the client cache.</returns>
            public SubscriptionBuilder SubscriptionBuilder() => conn.SubscriptionBuilder();
            /// <summary>
            /// Get the <c>Identity</c> of this connection.
            ///
            /// This method returns null if the connection was constructed anonymously
            /// and we have not yet received our newly-generated <c>Identity</c> from the host.
            /// </summary>
            public Identity? Identity => conn.Identity;
            /// <summary>
            /// Get this connection's <c>ConnectionId</c>.
            /// </summary>
            public ConnectionId ConnectionId => conn.ConnectionId;

            internal ReducerEventContext(DbConnection conn, ReducerEvent<Reducer> reducerEvent)
            {
                this.conn = conn;
                Event = reducerEvent;
            }
        }

        public sealed class ErrorContext : IErrorContext, IRemoteDbContext
        {
            private readonly DbConnection conn;
            /// <summary>
            /// The <c>Exception</c> that caused this error callback to be run.
            /// </summary>
            public readonly Exception Event;
            Exception IErrorContext.Event {
                get {
                    return Event;
                }
            }
            
            /// <summary>
            /// Access to tables in the client cache, which stores a read-only replica of the remote database state.
            ///
            /// The returned <c>DbView</c> will have a method to access each table defined by the module.
            /// </summary>
            public RemoteTables Db => conn.Db;
            /// <summary>
            /// Access to reducers defined by the module.
            ///
            /// The returned <c>RemoteReducers</c> will have a method to invoke each reducer defined by the module,
            /// plus methods for adding and removing callbacks on each of those reducers.
            /// </summary>
            public RemoteReducers Reducers => conn.Reducers;
            /// <summary>
            /// Access to setters for per-reducer flags.
            ///
            /// The returned <c>SetReducerFlags</c> will have a method to invoke,
            /// for each reducer defined by the module,
            /// which call-flags for the reducer can be set.
            /// </summary>
            public SetReducerFlags SetReducerFlags => conn.SetReducerFlags;
            /// <summary>
            /// Returns <c>true</c> if the connection is active, i.e. has not yet disconnected.
            /// </summary>
            public bool IsActive => conn.IsActive;
            /// <summary>
            /// Close the connection.
            ///
            /// Throws an error if the connection is already closed.
            /// </summary>
            public void Disconnect() {
                conn.Disconnect();
            }
            /// <summary>
            /// Start building a subscription.
            /// </summary>
            /// <returns>A builder-pattern constructor for subscribing to queries,
            /// causing matching rows to be replicated into the client cache.</returns>
            public SubscriptionBuilder SubscriptionBuilder() => conn.SubscriptionBuilder();
            /// <summary>
            /// Get the <c>Identity</c> of this connection.
            ///
            /// This method returns null if the connection was constructed anonymously
            /// and we have not yet received our newly-generated <c>Identity</c> from the host.
            /// </summary>
            public Identity? Identity => conn.Identity;
            /// <summary>
            /// Get this connection's <c>ConnectionId</c>.
            /// </summary>
            public ConnectionId ConnectionId => conn.ConnectionId;

            internal ErrorContext(DbConnection conn, Exception error)
            {
                this.conn = conn;
                Event = error;
            }
        }

        public sealed class SubscriptionEventContext : ISubscriptionEventContext, IRemoteDbContext
        {
            private readonly DbConnection conn;

            /// <summary>
            /// Access to tables in the client cache, which stores a read-only replica of the remote database state.
            ///
            /// The returned <c>DbView</c> will have a method to access each table defined by the module.
            /// </summary>
            public RemoteTables Db => conn.Db;
            /// <summary>
            /// Access to reducers defined by the module.
            ///
            /// The returned <c>RemoteReducers</c> will have a method to invoke each reducer defined by the module,
            /// plus methods for adding and removing callbacks on each of those reducers.
            /// </summary>
            public RemoteReducers Reducers => conn.Reducers;
            /// <summary>
            /// Access to setters for per-reducer flags.
            ///
            /// The returned <c>SetReducerFlags</c> will have a method to invoke,
            /// for each reducer defined by the module,
            /// which call-flags for the reducer can be set.
            /// </summary>
            public SetReducerFlags SetReducerFlags => conn.SetReducerFlags;
            /// <summary>
            /// Returns <c>true</c> if the connection is active, i.e. has not yet disconnected.
            /// </summary>
            public bool IsActive => conn.IsActive;
            /// <summary>
            /// Close the connection.
            ///
            /// Throws an error if the connection is already closed.
            /// </summary>
            public void Disconnect() {
                conn.Disconnect();
            }
            /// <summary>
            /// Start building a subscription.
            /// </summary>
            /// <returns>A builder-pattern constructor for subscribing to queries,
            /// causing matching rows to be replicated into the client cache.</returns>
            public SubscriptionBuilder SubscriptionBuilder() => conn.SubscriptionBuilder();
            /// <summary>
            /// Get the <c>Identity</c> of this connection.
            ///
            /// This method returns null if the connection was constructed anonymously
            /// and we have not yet received our newly-generated <c>Identity</c> from the host.
            /// </summary>
            public Identity? Identity => conn.Identity;
            /// <summary>
            /// Get this connection's <c>ConnectionId</c>.
            /// </summary>
            public ConnectionId ConnectionId => conn.ConnectionId;

            internal SubscriptionEventContext(DbConnection conn)
            {
                this.conn = conn;
            }
        }

        /// <summary>
        /// Builder-pattern constructor for subscription queries.
        /// </summary>
        public sealed class SubscriptionBuilder
        {
            private readonly IDbConnection conn;

            private event Action<SubscriptionEventContext>? Applied;
            private event Action<ErrorContext, Exception>? Error;

            /// <summary>
            /// Private API, use <c>conn.SubscriptionBuilder()</c> instead.
            /// </summary>
            public SubscriptionBuilder(IDbConnection conn)
            {
                this.conn = conn;
            }

            /// <summary>
            /// Register a callback to run when the subscription is applied.
            /// </summary>
            public SubscriptionBuilder OnApplied(
                Action<SubscriptionEventContext> callback
            )
            {
                Applied += callback;
                return this;
            }

            /// <summary>
            /// Register a callback to run when the subscription fails.
            ///
            /// Note that this callback may run either when attempting to apply the subscription,
            /// in which case <c>Self::on_applied</c> will never run,
            /// or later during the subscription's lifetime if the module's interface changes,
            /// in which case <c>Self::on_applied</c> may have already run.
            /// </summary>
            public SubscriptionBuilder OnError(
                Action<ErrorContext, Exception> callback
            )
            {
                Error += callback;
                return this;
            }

            /// <summary>
            /// Subscribe to the following SQL queries.
            /// 
            /// This method returns immediately, with the data not yet added to the DbConnection.
            /// The provided callbacks will be invoked once the data is returned from the remote server.
            /// Data from all the provided queries will be returned at the same time.
            /// 
            /// See the SpacetimeDB SQL docs for more information on SQL syntax:
            /// <a href="https://spacetimedb.com/docs/sql">https://spacetimedb.com/docs/sql</a>
            /// </summary>
            public SubscriptionHandle Subscribe(
                string[] querySqls
            ) => new(conn, Applied, Error, querySqls);

            /// <summary>
            /// Subscribe to all rows from all tables.
            ///
            /// This method is intended as a convenience
            /// for applications where client-side memory use and network bandwidth are not concerns.
            /// Applications where these resources are a constraint
            /// should register more precise queries via <c>Self.Subscribe</c>
            /// in order to replicate only the subset of data which the client needs to function.
            ///
            /// This method should not be combined with <c>Self.Subscribe</c> on the same <c>DbConnection</c>.
            /// A connection may either <c>Self.Subscribe</c> to particular queries,
            /// or <c>Self.SubscribeToAllTables</c>, but not both.
            /// Attempting to call <c>Self.Subscribe</c>
            /// on a <c>DbConnection</c> that has previously used <c>Self.SubscribeToAllTables</c>,
            /// or vice versa, may misbehave in any number of ways,
            /// including dropping subscriptions, corrupting the client cache, or panicking.
            /// </summary>
            public void SubscribeToAllTables()
            {
                // Make sure we use the legacy handle constructor here, even though there's only 1 query.
                // We drop the error handler, since it can't be called for legacy subscriptions.
                new SubscriptionHandle(
                    conn,
                    Applied,
                    new string[] { "SELECT * FROM *" }
                );
            }
        }

        public sealed class SubscriptionHandle : SubscriptionHandleBase<SubscriptionEventContext, ErrorContext> {
            /// <summary>
            /// Internal API. Construct <c>SubscriptionHandle</c>s using <c>conn.SubscriptionBuilder</c>.
            /// </summary>
            public SubscriptionHandle(IDbConnection conn, Action<SubscriptionEventContext>? onApplied, string[] querySqls) : base(conn, onApplied, querySqls)
            { }

            /// <summary>
            /// Internal API. Construct <c>SubscriptionHandle</c>s using <c>conn.SubscriptionBuilder</c>.
            /// </summary>
            public SubscriptionHandle(
                IDbConnection conn,
                Action<SubscriptionEventContext>? onApplied,
                Action<ErrorContext, Exception>? onError,
                string[] querySqls
            ) : base(conn, onApplied, onError, querySqls)
            { }
        }

    public abstract partial class Reducer
    {
        private Reducer() { }
    }

    public sealed class DbConnection : DbConnectionBase<DbConnection, RemoteTables, Reducer>
    {
        public override RemoteTables Db { get; }
        public readonly RemoteReducers Reducers;
        public readonly SetReducerFlags SetReducerFlags = new();

        public DbConnection()
        {
            Db = new(this);
            Reducers = new(this, SetReducerFlags);
        }

        protected override Reducer ToReducer(TransactionUpdate update)
        {
            var encodedArgs = update.ReducerCall.Args;
            return update.ReducerCall.ReducerName switch {
                "ActivateBus" => BSATNHelpers.Decode<Reducer.ActivateBus>(encodedArgs),
                "ActivateRoute" => BSATNHelpers.Decode<Reducer.ActivateRoute>(encodedArgs),
                "ActivateSchedule" => BSATNHelpers.Decode<Reducer.ActivateSchedule>(encodedArgs),
                "ActivateUser" => BSATNHelpers.Decode<Reducer.ActivateUser>(encodedArgs),
                "Add" => BSATNHelpers.Decode<Reducer.Add>(encodedArgs),
                "AddNewPermission" => BSATNHelpers.Decode<Reducer.AddNewPermission>(encodedArgs),
                "ApproveQrSession" => BSATNHelpers.Decode<Reducer.ApproveQrSession>(encodedArgs),
                "AssignRole" => BSATNHelpers.Decode<Reducer.AssignRole>(encodedArgs),
                "AuthenticateUser" => BSATNHelpers.Decode<Reducer.AuthenticateUser>(encodedArgs),
                "CancelTicket" => BSATNHelpers.Decode<Reducer.CancelTicket>(encodedArgs),
                "ChangePassword" => BSATNHelpers.Decode<Reducer.ChangePassword>(encodedArgs),
                "ClaimUserAccount" => BSATNHelpers.Decode<Reducer.ClaimUserAccount>(encodedArgs),
                "ClientConnected" => BSATNHelpers.Decode<Reducer.ClientConnected>(encodedArgs),
                "CreateBus" => BSATNHelpers.Decode<Reducer.CreateBus>(encodedArgs),
                "CreateEmployee" => BSATNHelpers.Decode<Reducer.CreateEmployee>(encodedArgs),
                "CreateJob" => BSATNHelpers.Decode<Reducer.CreateJob>(encodedArgs),
                "CreateMagicLinkToken" => BSATNHelpers.Decode<Reducer.CreateMagicLinkToken>(encodedArgs),
                "CreateMaintenance" => BSATNHelpers.Decode<Reducer.CreateMaintenance>(encodedArgs),
                "CreateOidcAuthorization" => BSATNHelpers.Decode<Reducer.CreateOidcAuthorization>(encodedArgs),
                "CreateOidcScope" => BSATNHelpers.Decode<Reducer.CreateOidcScope>(encodedArgs),
                "CreateOidcToken" => BSATNHelpers.Decode<Reducer.CreateOidcToken>(encodedArgs),
                "CreateOpenIdGrant" => BSATNHelpers.Decode<Reducer.CreateOpenIdGrant>(encodedArgs),
                "CreatePassenger" => BSATNHelpers.Decode<Reducer.CreatePassenger>(encodedArgs),
                "CreateQRSession" => BSATNHelpers.Decode<Reducer.CreateQrSession>(encodedArgs),
                "CreateRoleReducer" => BSATNHelpers.Decode<Reducer.CreateRoleReducer>(encodedArgs),
                "CreateRoute" => BSATNHelpers.Decode<Reducer.CreateRoute>(encodedArgs),
                "CreateRouteSchedule" => BSATNHelpers.Decode<Reducer.CreateRouteSchedule>(encodedArgs),
                "CreateSale" => BSATNHelpers.Decode<Reducer.CreateSale>(encodedArgs),
                "CreateTicket" => BSATNHelpers.Decode<Reducer.CreateTicket>(encodedArgs),
                "CreateTwoFactorToken" => BSATNHelpers.Decode<Reducer.CreateTwoFactorToken>(encodedArgs),
                "CreateUserSettings" => BSATNHelpers.Decode<Reducer.CreateUserSettings>(encodedArgs),
                "DeactivateBus" => BSATNHelpers.Decode<Reducer.DeactivateBus>(encodedArgs),
                "DeactivateRoute" => BSATNHelpers.Decode<Reducer.DeactivateRoute>(encodedArgs),
                "DeactivateSchedule" => BSATNHelpers.Decode<Reducer.DeactivateSchedule>(encodedArgs),
                "DeactivateTotpSecret" => BSATNHelpers.Decode<Reducer.DeactivateTotpSecret>(encodedArgs),
                "DeactivateUser" => BSATNHelpers.Decode<Reducer.DeactivateUser>(encodedArgs),
                "DeactivateWebAuthnCredential" => BSATNHelpers.Decode<Reducer.DeactivateWebAuthnCredential>(encodedArgs),
                "DebugVerifyPassword" => BSATNHelpers.Decode<Reducer.DebugVerifyPassword>(encodedArgs),
                "DeleteBus" => BSATNHelpers.Decode<Reducer.DeleteBus>(encodedArgs),
                "DeleteEmployee" => BSATNHelpers.Decode<Reducer.DeleteEmployee>(encodedArgs),
                "DeleteJob" => BSATNHelpers.Decode<Reducer.DeleteJob>(encodedArgs),
                "DeleteMaintenance" => BSATNHelpers.Decode<Reducer.DeleteMaintenance>(encodedArgs),
                "DeleteOidcAuthorization" => BSATNHelpers.Decode<Reducer.DeleteOidcAuthorization>(encodedArgs),
                "DeleteOidcScope" => BSATNHelpers.Decode<Reducer.DeleteOidcScope>(encodedArgs),
                "DeleteOidcToken" => BSATNHelpers.Decode<Reducer.DeleteOidcToken>(encodedArgs),
                "DeletePassenger" => BSATNHelpers.Decode<Reducer.DeletePassenger>(encodedArgs),
                "DeletePermission" => BSATNHelpers.Decode<Reducer.DeletePermission>(encodedArgs),
                "DeleteQRSession" => BSATNHelpers.Decode<Reducer.DeleteQrSession>(encodedArgs),
                "DeleteRole" => BSATNHelpers.Decode<Reducer.DeleteRole>(encodedArgs),
                "DeleteRoleReducer" => BSATNHelpers.Decode<Reducer.DeleteRoleReducer>(encodedArgs),
                "DeleteRoute" => BSATNHelpers.Decode<Reducer.DeleteRoute>(encodedArgs),
                "DeleteRouteSchedule" => BSATNHelpers.Decode<Reducer.DeleteRouteSchedule>(encodedArgs),
                "DeleteSale" => BSATNHelpers.Decode<Reducer.DeleteSale>(encodedArgs),
                "DeleteTicket" => BSATNHelpers.Decode<Reducer.DeleteTicket>(encodedArgs),
                "DeleteTwoFactorToken" => BSATNHelpers.Decode<Reducer.DeleteTwoFactorToken>(encodedArgs),
                "DeleteUser" => BSATNHelpers.Decode<Reducer.DeleteUser>(encodedArgs),
                "DeleteWebAuthnChallenge" => BSATNHelpers.Decode<Reducer.DeleteWebAuthnChallenge>(encodedArgs),
                "DisableTotp" => BSATNHelpers.Decode<Reducer.DisableTotp>(encodedArgs),
                "DisableWebAuthn" => BSATNHelpers.Decode<Reducer.DisableWebAuthn>(encodedArgs),
                "EnableTotp" => BSATNHelpers.Decode<Reducer.EnableTotp>(encodedArgs),
                "EnableWebAuthn" => BSATNHelpers.Decode<Reducer.EnableWebAuthn>(encodedArgs),
                "GenerateTotpSecret" => BSATNHelpers.Decode<Reducer.GenerateTotpSecret>(encodedArgs),
                "GetBusMaintenanceHistory" => BSATNHelpers.Decode<Reducer.GetBusMaintenanceHistory>(encodedArgs),
                "GrantPermissionToRole" => BSATNHelpers.Decode<Reducer.GrantPermissionToRole>(encodedArgs),
                "LogAdminAction" => BSATNHelpers.Decode<Reducer.LogAdminAction>(encodedArgs),
                "PruneOidcAuthorizations" => BSATNHelpers.Decode<Reducer.PruneOidcAuthorizations>(encodedArgs),
                "PruneOidcTokens" => BSATNHelpers.Decode<Reducer.PruneOidcTokens>(encodedArgs),
                "RegisterOpenIdClient" => BSATNHelpers.Decode<Reducer.RegisterOpenIdClient>(encodedArgs),
                "RegisterUser" => BSATNHelpers.Decode<Reducer.RegisterUser>(encodedArgs),
                "RegisterWebAuthnCredential" => BSATNHelpers.Decode<Reducer.RegisterWebAuthnCredential>(encodedArgs),
                "RemoveRole" => BSATNHelpers.Decode<Reducer.RemoveRole>(encodedArgs),
                "RevokeOpenIdClient" => BSATNHelpers.Decode<Reducer.RevokeOpenIdClient>(encodedArgs),
                "RevokeOpenIdGrant" => BSATNHelpers.Decode<Reducer.RevokeOpenIdGrant>(encodedArgs),
                "RevokePermissionFromRole" => BSATNHelpers.Decode<Reducer.RevokePermissionFromRole>(encodedArgs),
                "SayHello" => BSATNHelpers.Decode<Reducer.SayHello>(encodedArgs),
                "StoreTotpSecret" => BSATNHelpers.Decode<Reducer.StoreTotpSecret>(encodedArgs),
                "StoreWebAuthnChallenge" => BSATNHelpers.Decode<Reducer.StoreWebAuthnChallenge>(encodedArgs),
                "UpdateBus" => BSATNHelpers.Decode<Reducer.UpdateBus>(encodedArgs),
                "UpdateEmployee" => BSATNHelpers.Decode<Reducer.UpdateEmployee>(encodedArgs),
                "UpdateJob" => BSATNHelpers.Decode<Reducer.UpdateJob>(encodedArgs),
                "UpdateMaintenance" => BSATNHelpers.Decode<Reducer.UpdateMaintenance>(encodedArgs),
                "UpdateOidcAuthorization" => BSATNHelpers.Decode<Reducer.UpdateOidcAuthorization>(encodedArgs),
                "UpdateOidcScope" => BSATNHelpers.Decode<Reducer.UpdateOidcScope>(encodedArgs),
                "UpdateOidcToken" => BSATNHelpers.Decode<Reducer.UpdateOidcToken>(encodedArgs),
                "UpdateOpenIdClient" => BSATNHelpers.Decode<Reducer.UpdateOpenIdClient>(encodedArgs),
                "UpdatePassenger" => BSATNHelpers.Decode<Reducer.UpdatePassenger>(encodedArgs),
                "UpdatePermission" => BSATNHelpers.Decode<Reducer.UpdatePermission>(encodedArgs),
                "UpdateRole" => BSATNHelpers.Decode<Reducer.UpdateRole>(encodedArgs),
                "UpdateRoleReducer" => BSATNHelpers.Decode<Reducer.UpdateRoleReducer>(encodedArgs),
                "UpdateRoute" => BSATNHelpers.Decode<Reducer.UpdateRoute>(encodedArgs),
                "UpdateRouteSchedule" => BSATNHelpers.Decode<Reducer.UpdateRouteSchedule>(encodedArgs),
                "UpdateSale" => BSATNHelpers.Decode<Reducer.UpdateSale>(encodedArgs),
                "UpdateTicket" => BSATNHelpers.Decode<Reducer.UpdateTicket>(encodedArgs),
                "UpdateTwoFactorToken" => BSATNHelpers.Decode<Reducer.UpdateTwoFactorToken>(encodedArgs),
                "UpdateUser" => BSATNHelpers.Decode<Reducer.UpdateUser>(encodedArgs),
                "UpdateWebAuthnCounter" => BSATNHelpers.Decode<Reducer.UpdateWebAuthnCounter>(encodedArgs),
                "UpdateWebAuthnCredentialCounter" => BSATNHelpers.Decode<Reducer.UpdateWebAuthnCredentialCounter>(encodedArgs),
                "UseMagicLinkToken" => BSATNHelpers.Decode<Reducer.UseMagicLinkToken>(encodedArgs),
                "UseQRSession" => BSATNHelpers.Decode<Reducer.UseQrSession>(encodedArgs),
                "ValidateQRCode" => BSATNHelpers.Decode<Reducer.ValidateQrCode>(encodedArgs),
                var reducer => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
            };
        }

        protected override IEventContext ToEventContext(Event<Reducer> Event) =>
        new EventContext(this, Event);

        protected override IReducerEventContext ToReducerEventContext(ReducerEvent<Reducer> reducerEvent) =>
        new ReducerEventContext(this, reducerEvent);

        protected override ISubscriptionEventContext MakeSubscriptionEventContext() =>
        new SubscriptionEventContext(this);

        protected override IErrorContext ToErrorContext(Exception exception) =>
        new ErrorContext(this, exception);

        protected override bool Dispatch(IReducerEventContext context, Reducer reducer)
        {
            var eventContext = (ReducerEventContext)context;
            return reducer switch {
                Reducer.ActivateBus args => Reducers.InvokeActivateBus(eventContext, args),
                Reducer.ActivateRoute args => Reducers.InvokeActivateRoute(eventContext, args),
                Reducer.ActivateSchedule args => Reducers.InvokeActivateSchedule(eventContext, args),
                Reducer.ActivateUser args => Reducers.InvokeActivateUser(eventContext, args),
                Reducer.Add args => Reducers.InvokeAdd(eventContext, args),
                Reducer.AddNewPermission args => Reducers.InvokeAddNewPermission(eventContext, args),
                Reducer.ApproveQrSession args => Reducers.InvokeApproveQrSession(eventContext, args),
                Reducer.AssignRole args => Reducers.InvokeAssignRole(eventContext, args),
                Reducer.AuthenticateUser args => Reducers.InvokeAuthenticateUser(eventContext, args),
                Reducer.CancelTicket args => Reducers.InvokeCancelTicket(eventContext, args),
                Reducer.ChangePassword args => Reducers.InvokeChangePassword(eventContext, args),
                Reducer.ClaimUserAccount args => Reducers.InvokeClaimUserAccount(eventContext, args),
                Reducer.ClientConnected args => Reducers.InvokeClientConnected(eventContext, args),
                Reducer.CreateBus args => Reducers.InvokeCreateBus(eventContext, args),
                Reducer.CreateEmployee args => Reducers.InvokeCreateEmployee(eventContext, args),
                Reducer.CreateJob args => Reducers.InvokeCreateJob(eventContext, args),
                Reducer.CreateMagicLinkToken args => Reducers.InvokeCreateMagicLinkToken(eventContext, args),
                Reducer.CreateMaintenance args => Reducers.InvokeCreateMaintenance(eventContext, args),
                Reducer.CreateOidcAuthorization args => Reducers.InvokeCreateOidcAuthorization(eventContext, args),
                Reducer.CreateOidcScope args => Reducers.InvokeCreateOidcScope(eventContext, args),
                Reducer.CreateOidcToken args => Reducers.InvokeCreateOidcToken(eventContext, args),
                Reducer.CreateOpenIdGrant args => Reducers.InvokeCreateOpenIdGrant(eventContext, args),
                Reducer.CreatePassenger args => Reducers.InvokeCreatePassenger(eventContext, args),
                Reducer.CreateQrSession args => Reducers.InvokeCreateQrSession(eventContext, args),
                Reducer.CreateRoleReducer args => Reducers.InvokeCreateRoleReducer(eventContext, args),
                Reducer.CreateRoute args => Reducers.InvokeCreateRoute(eventContext, args),
                Reducer.CreateRouteSchedule args => Reducers.InvokeCreateRouteSchedule(eventContext, args),
                Reducer.CreateSale args => Reducers.InvokeCreateSale(eventContext, args),
                Reducer.CreateTicket args => Reducers.InvokeCreateTicket(eventContext, args),
                Reducer.CreateTwoFactorToken args => Reducers.InvokeCreateTwoFactorToken(eventContext, args),
                Reducer.CreateUserSettings args => Reducers.InvokeCreateUserSettings(eventContext, args),
                Reducer.DeactivateBus args => Reducers.InvokeDeactivateBus(eventContext, args),
                Reducer.DeactivateRoute args => Reducers.InvokeDeactivateRoute(eventContext, args),
                Reducer.DeactivateSchedule args => Reducers.InvokeDeactivateSchedule(eventContext, args),
                Reducer.DeactivateTotpSecret args => Reducers.InvokeDeactivateTotpSecret(eventContext, args),
                Reducer.DeactivateUser args => Reducers.InvokeDeactivateUser(eventContext, args),
                Reducer.DeactivateWebAuthnCredential args => Reducers.InvokeDeactivateWebAuthnCredential(eventContext, args),
                Reducer.DebugVerifyPassword args => Reducers.InvokeDebugVerifyPassword(eventContext, args),
                Reducer.DeleteBus args => Reducers.InvokeDeleteBus(eventContext, args),
                Reducer.DeleteEmployee args => Reducers.InvokeDeleteEmployee(eventContext, args),
                Reducer.DeleteJob args => Reducers.InvokeDeleteJob(eventContext, args),
                Reducer.DeleteMaintenance args => Reducers.InvokeDeleteMaintenance(eventContext, args),
                Reducer.DeleteOidcAuthorization args => Reducers.InvokeDeleteOidcAuthorization(eventContext, args),
                Reducer.DeleteOidcScope args => Reducers.InvokeDeleteOidcScope(eventContext, args),
                Reducer.DeleteOidcToken args => Reducers.InvokeDeleteOidcToken(eventContext, args),
                Reducer.DeletePassenger args => Reducers.InvokeDeletePassenger(eventContext, args),
                Reducer.DeletePermission args => Reducers.InvokeDeletePermission(eventContext, args),
                Reducer.DeleteQrSession args => Reducers.InvokeDeleteQrSession(eventContext, args),
                Reducer.DeleteRole args => Reducers.InvokeDeleteRole(eventContext, args),
                Reducer.DeleteRoleReducer args => Reducers.InvokeDeleteRoleReducer(eventContext, args),
                Reducer.DeleteRoute args => Reducers.InvokeDeleteRoute(eventContext, args),
                Reducer.DeleteRouteSchedule args => Reducers.InvokeDeleteRouteSchedule(eventContext, args),
                Reducer.DeleteSale args => Reducers.InvokeDeleteSale(eventContext, args),
                Reducer.DeleteTicket args => Reducers.InvokeDeleteTicket(eventContext, args),
                Reducer.DeleteTwoFactorToken args => Reducers.InvokeDeleteTwoFactorToken(eventContext, args),
                Reducer.DeleteUser args => Reducers.InvokeDeleteUser(eventContext, args),
                Reducer.DeleteWebAuthnChallenge args => Reducers.InvokeDeleteWebAuthnChallenge(eventContext, args),
                Reducer.DisableTotp args => Reducers.InvokeDisableTotp(eventContext, args),
                Reducer.DisableWebAuthn args => Reducers.InvokeDisableWebAuthn(eventContext, args),
                Reducer.EnableTotp args => Reducers.InvokeEnableTotp(eventContext, args),
                Reducer.EnableWebAuthn args => Reducers.InvokeEnableWebAuthn(eventContext, args),
                Reducer.GenerateTotpSecret args => Reducers.InvokeGenerateTotpSecret(eventContext, args),
                Reducer.GetBusMaintenanceHistory args => Reducers.InvokeGetBusMaintenanceHistory(eventContext, args),
                Reducer.GrantPermissionToRole args => Reducers.InvokeGrantPermissionToRole(eventContext, args),
                Reducer.LogAdminAction args => Reducers.InvokeLogAdminAction(eventContext, args),
                Reducer.PruneOidcAuthorizations args => Reducers.InvokePruneOidcAuthorizations(eventContext, args),
                Reducer.PruneOidcTokens args => Reducers.InvokePruneOidcTokens(eventContext, args),
                Reducer.RegisterOpenIdClient args => Reducers.InvokeRegisterOpenIdClient(eventContext, args),
                Reducer.RegisterUser args => Reducers.InvokeRegisterUser(eventContext, args),
                Reducer.RegisterWebAuthnCredential args => Reducers.InvokeRegisterWebAuthnCredential(eventContext, args),
                Reducer.RemoveRole args => Reducers.InvokeRemoveRole(eventContext, args),
                Reducer.RevokeOpenIdClient args => Reducers.InvokeRevokeOpenIdClient(eventContext, args),
                Reducer.RevokeOpenIdGrant args => Reducers.InvokeRevokeOpenIdGrant(eventContext, args),
                Reducer.RevokePermissionFromRole args => Reducers.InvokeRevokePermissionFromRole(eventContext, args),
                Reducer.SayHello args => Reducers.InvokeSayHello(eventContext, args),
                Reducer.StoreTotpSecret args => Reducers.InvokeStoreTotpSecret(eventContext, args),
                Reducer.StoreWebAuthnChallenge args => Reducers.InvokeStoreWebAuthnChallenge(eventContext, args),
                Reducer.UpdateBus args => Reducers.InvokeUpdateBus(eventContext, args),
                Reducer.UpdateEmployee args => Reducers.InvokeUpdateEmployee(eventContext, args),
                Reducer.UpdateJob args => Reducers.InvokeUpdateJob(eventContext, args),
                Reducer.UpdateMaintenance args => Reducers.InvokeUpdateMaintenance(eventContext, args),
                Reducer.UpdateOidcAuthorization args => Reducers.InvokeUpdateOidcAuthorization(eventContext, args),
                Reducer.UpdateOidcScope args => Reducers.InvokeUpdateOidcScope(eventContext, args),
                Reducer.UpdateOidcToken args => Reducers.InvokeUpdateOidcToken(eventContext, args),
                Reducer.UpdateOpenIdClient args => Reducers.InvokeUpdateOpenIdClient(eventContext, args),
                Reducer.UpdatePassenger args => Reducers.InvokeUpdatePassenger(eventContext, args),
                Reducer.UpdatePermission args => Reducers.InvokeUpdatePermission(eventContext, args),
                Reducer.UpdateRole args => Reducers.InvokeUpdateRole(eventContext, args),
                Reducer.UpdateRoleReducer args => Reducers.InvokeUpdateRoleReducer(eventContext, args),
                Reducer.UpdateRoute args => Reducers.InvokeUpdateRoute(eventContext, args),
                Reducer.UpdateRouteSchedule args => Reducers.InvokeUpdateRouteSchedule(eventContext, args),
                Reducer.UpdateSale args => Reducers.InvokeUpdateSale(eventContext, args),
                Reducer.UpdateTicket args => Reducers.InvokeUpdateTicket(eventContext, args),
                Reducer.UpdateTwoFactorToken args => Reducers.InvokeUpdateTwoFactorToken(eventContext, args),
                Reducer.UpdateUser args => Reducers.InvokeUpdateUser(eventContext, args),
                Reducer.UpdateWebAuthnCounter args => Reducers.InvokeUpdateWebAuthnCounter(eventContext, args),
                Reducer.UpdateWebAuthnCredentialCounter args => Reducers.InvokeUpdateWebAuthnCredentialCounter(eventContext, args),
                Reducer.UseMagicLinkToken args => Reducers.InvokeUseMagicLinkToken(eventContext, args),
                Reducer.UseQrSession args => Reducers.InvokeUseQrSession(eventContext, args),
                Reducer.ValidateQrCode args => Reducers.InvokeValidateQrCode(eventContext, args),
                _ => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
            };
        }

        public SubscriptionBuilder SubscriptionBuilder() => new(this);
    }
}
